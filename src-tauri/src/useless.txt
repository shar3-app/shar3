let base64;
let name = path.file_name()
    .and_then(|name| name.to_str()) // Convert OsStr to str
    .ok_or_else(|| warp::reject::not_found())?;

match file_to_base64(&remove_last_char(selected_path)) {
    Ok(base64_string) => base64 = base64_string,
    Err(_) => base64 = String::from(selected_path)
}
html = String::from("");
//<h1>Download file ");
//html.push_str(name);
//html.push_str("</h1><a href=\"");
//html.push_str(path.display().to_string().as_str());
//html.push_str("\" download>Download</a>");
html.push_str("
    <html>
        <head>
            <title>Document</title>
            <style>
                body {
                    margin: 0;
                }
                canvas {
                    width: 100vw;
                    height: 100vh;
                    border: 1px solid #000
                }
            </style>
        </head>
    <body>
        <button id=\"prev\">Prev</button>
        <button id=\"next\">Next</button>
        <span id=\"npages\">not yet</span>
        <canvas id=\"cnv\">

        </canvas>

        <script src=\"https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/build/pdf.min.js\"></script>

        <script type=\"module\">
            const PDFStart = pdfData => {
                let loadingTask = pdfjsLib.getDocument({data: pdfData}),
                    pdfDoc = null,
                    canvas = document.querySelector('#cnv'),
                    ctx = canvas.getContext('2d'),
                    scale = 1,
                    numPage = 1;

                    const GeneratePDF = numPage => {

                        pdfDoc.getPage(numPage).then(page => {
                            let viewport = page.getViewport({ scale: scale });

                            let renderContext = {
                                canvasContext : ctx,
                                viewport:  viewport
                            }

                            page.render(renderContext);
                        })
                        document.querySelector('#npages').innerHTML = numPage;

                    }

                    const PrevPage = () => {
                        if(numPage === 1){
                            return
                        }
                        numPage--;
                        GeneratePDF(numPage);
                    }

                    const NextPage = () => {
                        if(numPage >= pdfDoc.numPages){
                            return
                        }
                        numPage++;
                        GeneratePDF(numPage);
                    }

                    document.querySelector('#prev').addEventListener('click', PrevPage)
                    document.querySelector('#next').addEventListener('click', NextPage )

                    loadingTask.promise.then(pdfDoc_ => {
                        pdfDoc = pdfDoc_;
                        document.querySelector('#npages').innerHTML = pdfDoc.numPages;
                        GeneratePDF(numPage)
                    });
            }

            const startPdf = () => {
                PDFStart(atob('");html.push_str(&base64);html.push_str("'))
            }

            window.addEventListener('load', startPdf);
        </script>
    </body>
</html>");
